@page "/students-management"
@inject DataService DataService
@inject Blazored.Toast.Services.IToastService ToastService
@inject Microsoft.JSInterop.IJSRuntime JSRuntime


<h3 class="text-center">الطلاب</h3>

<div class="container mt-4">
    <h3>معلومات الطلاب</h3>
    <div class="form-group">
        <label for="certificateSelect">اختر الشهادة</label>
        <select id="certificateSelect" class="form-control" @bind="selectedCertificateId">
            <option value="">--اختر الشهادة--</option>
            @foreach (var certificate in certificates)
            {
                <option value="@certificate.Id">@certificate.Name</option>
            }
        </select>
    </div>
    @if (selectedCertificateId != Guid.Empty)
    {
        <div class="form-group">
            <label for="divisionSelect">اختر الشعبة</label>
            <select id="divisionSelect" class="form-control" @bind="selectedDivisionId">
                <option value="">--اختر الشعبة--</option>
                @foreach (var division in divisions)
                {
                    <option value="@division.Id">@division.Name</option>
                }
            </select>
        </div>
    }
    @if (selectedDivisionId != Guid.Empty)
    {
        <div class="mb-2">
            <input type="text" placeholder="البحث عن طريق الاسم او رقم الهاتف" class="form-control" @oninput="OnSearchChanged">
        </div>
        <button class="btn btn-primary mb-3" @onclick="ShowAddStudentModal">اضافة طالب جديد</button>
        @if (isLoading)
        {
            <p>جاري التحميل</p>
        }
        else
        {
            <table class="table table-striped table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>الاسم الأول</th>
                        <th>الاسم الأخير</th>
                        <th>الجنس</th>
                        <th>العنوان</th>
                        <th>تاريخ الميلاد</th>
                        <th>الهاتف</th>
                        <th>اسم الاب</th>
                        <th>هاتف الاب</th>
                        <th>اسم الام</th>
                        <th>هاتف الام</th>
                        <th>ولي الامر</th>
                        <th>الدفعة الشهرية</th>
                        <th>المبلغ المستحق</th>
                        <th>معدل الطالب</th>
                        <th>فعل</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var student in filteredStudents)
                    {
                        <tr>
                            <td>@student.FirstName</td>
                            <td>@student.LastName</td>
                            <td>@student.Gender</td>
                            <td>@student.Address</td>
                            <td>@student.DateOfBirth.ToString("yyyy-MM-dd")</td>
                            <td>@student.PhoneNumber</td>
                            <td>@student.FatherName</td>
                            <td>@student.FatherPhoneNumber</td>
                            <td>@student.MotherName</td>
                            <td>@student.MotherPhoneNumber</td>
                            <td>@(student.IsFather ? "الاب" : "الام")</td>
                            <td>@student.agreedMonthlyPayment</td>
                            <td>@student.TotalFee</td>
                            <td>@student.Avg</td>
                            <td>
                                <button class="btn btn-warning btn-sm" @onclick="() => StartEditStudent(student)">تعديل</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteStudent(student.Id)">حذف</button>
                                <button class="btn btn-info btn-sm" @onclick="() => ShowPaymentsModal(student.Id)">الدفعات</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
</div>

<!-- Modal for Add/Edit Student -->
<div class="@($"modal fade {(showAddModal || showEditModal ? "show d-block" : "")}")" id="studentModal" tabindex="-1" aria-labelledby="studentModalLabel" aria-hidden="true" role="dialog" style="display: @(showAddModal || showEditModal ? "block" : "none")">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="studentModalLabel">@modalTitle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseStudentModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="firstNameInput">الاسم الأول</label>
                    <input type="text" class="form-control" id="firstNameInput" @bind="newStudent.FirstName" />
                </div>
                <div class="form-group">
                    <label for="lastNameInput">الاسم الأخير</label>
                    <input type="text" class="form-control" id="lastNameInput" @bind="newStudent.LastName" />
                </div>
                <div class="form-group">
                    <label for="genderSelect">الجنس</label>
                    <select id="genderSelect" class="form-control" @bind="newStudent.Gender">
                        <option value="">اختار الجنس</option>
                        <option value="ذكر">ذكر</option>
                        <option value="أنثى">أنثى</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="addressInput">العنوان</label>
                    <input type="text" class="form-control" id="addressInput" @bind="newStudent.Address" />
                </div>
                <div class="form-group">
                    <label for="dobInput">تاريخ الميلاد</label>
                    <input type="date" class="form-control" id="dobInput" @bind="newStudent.DateOfBirth" />
                </div>
                <div class="form-group">
                    <label for="phoneInput">الهاتف</label>
                    <input type="text" class="form-control" id="phoneInput" @bind="newStudent.PhoneNumber" />
                </div>
                <div class="form-group">
                    <label for="fatherNameInput">اسم الاب</label>
                    <input type="text" class="form-control" id="fatherNameInput" @bind="newStudent.FatherName" />
                </div>
                <div class="form-group">
                    <label for="guardianPhoneInput">هاتف الاب</label>
                    <input type="text" class="form-control" id="fatehrPhoneInput" @bind="newStudent.FatherPhoneNumber" />
                </div>
                <div class="form-group">
                    <label for="mohterNameInput">اسم الام</label>
                    <input type="text" class="form-control" id="motherNameInput" @bind="newStudent.MotherName" />
                </div>
                <div class="form-group">
                    <label for="mohterPhoneInput">هاتف الام</label>
                    <input type="text" class="form-control" id="motherPhoneInput" @bind="newStudent.MotherPhoneNumber" />
                </div>
                <div class="form-group">
                    <label for="isDad">ولي الامر</label>
                    <select id="isDad" class="form-control" @bind="newStudent.FatherOrMother">
                        <option value="">اختار ولي الامر الافتراضي</option>
                        <option value="Father">الاب</option>
                        <option value="Mother">الام</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="agreedPayment">الدفعة الشهرية المتفق عليها</label>
                    <input type="number" class="form-control" id="agreedPayment" @bind="newStudent.agreedMonthlyPayment" />
                </div>
                <div class="form-group">
                    <label for="totalFeeInput">اجمالي المدفوعات</label>
                    <input type="number" class="form-control" id="totalFeeInput" @bind="newStudent.TotalFee" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseStudentModal">إلغاء</button>
                <button type="button" class="btn btn-primary" @onclick="SaveStudent">حفظ</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Viewing and Adding Payments -->
<div class="@($"modal fade {(showPaymentsModal ? "show d-block" : "")}")" id="paymentsModal" tabindex="-1" aria-labelledby="paymentsModalLabel" aria-hidden="true" role="dialog" style="display: @(showPaymentsModal ? "block" : "none")">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="paymentsModalLabel">دفعات @currentStudent?.FullName</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="ClosePaymentsModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="table table-striped table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <th>الوصف</th>
                            <th>التاريخ</th>
                            <th>القيمة</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var payment in payments)
                        {
                            <tr>
                                <td>@payment.Description</td>
                                <td>@payment.CreatedAt.ToString("yyyy-MM-dd")</td>
                                <td>@payment.Value</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <p>مجموع الدفعات: @payments.Sum(p => p.Value)</p>
                <button class="btn btn-primary" @onclick="ShowAddPaymentModal">اضافة دفعة جديدة</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Adding a New Payment -->
<div class="@($"modal fade {(showAddPaymentModal ? "show d-block" : "")}")" id="addPaymentModal" tabindex="-1" aria-labelledby="addPaymentModalLabel" aria-hidden="true" role="dialog" style="display: @(showAddPaymentModal ? "block" : "none")">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addPaymentModalLabel">اضافة دفعة جديدة</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseAddPaymentModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="paymentDescription">الوصف</label>
                    <input type="text" class="form-control" id="paymentDescription" @bind="newPayment.Description" />
                </div>
                <div class="form-group">
                    <label for="paymentDate">التاريخ</label>
                    <input type="date" class="form-control" id="paymentDate" @bind="newPayment.CreatedAt" />
                </div>
                <div class="form-group">
                    <label for="paymentAmount">القيمة</label>
                    <input type="number" class="form-control" id="paymentAmount" @bind="newPayment.Value" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseAddPaymentModal">إلغاء</button>
                <button type="button" class="btn btn-primary" @onclick="AddPayment">حفظ</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<CertificateDto> certificates = new List<CertificateDto>();
    private List<DivisionDto> divisions = new List<DivisionDto>();
    private List<Student> students = new List<Student>();
    private List<Student> filteredStudents = new List<Student>();
    private List<PaymentDto> payments = new List<PaymentDto>();
    private Guid _selectedCertificateId;
    private Guid _selectedDivisionId;
    private bool showAddModal = false;
    private bool showEditModal = false;
    private bool showPaymentsModal = false;
    private bool showAddPaymentModal = false;
    private string SelectedDivisionName;
    private bool isLoading = false;
    private bool editMode = false;
    private string searchQuery = string.Empty;
    private Student newStudent = new Student();
    private Student currentStudent;
    private PaymentDto newPayment = new PaymentDto();
    private string modalTitle;

    public Guid selectedCertificateId
    {
        get => _selectedCertificateId;
        set
        {
            if (_selectedCertificateId != value)
            {
                _selectedCertificateId = value;
                OnCertificateChanged();
            }
        }
    }

    public Guid selectedDivisionId
    {
        get => _selectedDivisionId;
        set
        {
            if (_selectedDivisionId != value)
            {
                _selectedDivisionId = value;
                OnDivisionChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCertificates();
    }

    private async Task LoadCertificates()
    {
        isLoading = true;
        var response = await DataService.GetAllCertificates();
        if (response.StatusCode == Requests_Status.Ok)
        {
            certificates = response.Data.ToObj<GetAllCertificatesResponse>().certificates;
        }
        isLoading = false;
    }

    private async void OnCertificateChanged()
    {
        if (selectedCertificateId != Guid.Empty)
        {
            await LoadDivisions();
        }
    }

    private async Task LoadDivisions()
    {
        isLoading = true;
        var response = await DataService.GetAllDivisions(selectedCertificateId);
        if (response.StatusCode == Requests_Status.Ok)
        {
            divisions = response.Data.ToObj<GetAllDivisionsResponse>().divisions;
        }
        isLoading = false;
        StateHasChanged();
    }

    private async void OnDivisionChanged()
    {
        if (selectedDivisionId != Guid.Empty)
        {
            await LoadStudents();
        }
    }

    private async Task LoadStudents()
    {
        isLoading = true;
        var response = await DataService.GetAllStudents();
        if (response.StatusCode == Requests_Status.Ok)
        {
            var studentsDto = response.Data.ToObj<GetAllStudentsWithDivisionResponse>().students;
            students = studentsDto.Select(dto => new Student
                {
                    Id = dto.Id,
                    FirstName = dto.First_Name,
                    LastName = dto.Last_Name,
                    Address = dto.Address,
                    Gender = dto.Gender,
                    DateOfBirth = dto.BirthDay,
                    PhoneNumber = dto.Phone,
                    FatherPhoneNumber = dto.Father_Phone,
                    FatherName = dto.Father_Name,
                    MotherPhoneNumber = dto.Mother_Phone,
                    MotherName = dto.Mother_Name,
                    IsFather = dto.DefaultParentPhonIsFather,
                    TotalFee = dto.Total_Payments,
                    DivisionName = dto.Division,
                    agreedMonthlyPayment = dto.agreedMonthlyPayment,
                    Avg = dto.Avg
                }).ToList();
            response = await DataService.GetDivisionById(selectedDivisionId);
            if (response.StatusCode == Requests_Status.Ok)
            {
                SelectedDivisionName = response.Data.ToObj<GetDivisioneByIdResponse>().division.Name;
            }
            students = students.Where(s =>
            s.DivisionName.Equals(SelectedDivisionName, StringComparison.OrdinalIgnoreCase)).ToList();
            filteredStudents = students;
        }
        isLoading = false;
        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        FilterStudents();
    }

    private void FilterStudents()
    {
        filteredStudents = students.Where(s => 
            s.FullName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || 
            s.PhoneNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        StateHasChanged();
    }

    private void ShowAddStudentModal()
    {
        newStudent = new Student();
        editMode = false;
        modalTitle = "إضافة طالب جديد";
        OpenStudentModal();
    }

    private void StartEditStudent(Student student)
    {
        newStudent = new Student
        {
            Id = student.Id,
            FirstName = student.FirstName,
            LastName = student.LastName,
            Gender = student.Gender,
            Address = student.Address,
            DateOfBirth = student.DateOfBirth,
            PhoneNumber = student.PhoneNumber,
            FatherPhoneNumber = student.FatherPhoneNumber,
            FatherName = student.FatherName,
            MotherPhoneNumber = student.MotherPhoneNumber,
            MotherName = student.MotherName,
            IsFather = student.IsFather,
            TotalFee = student.TotalFee,
            agreedMonthlyPayment = student.agreedMonthlyPayment
        };
        editMode = true;
        modalTitle = "تعديل بيانات الطالب";
        OpenStudentModal();
    }

    private async Task SaveStudent()
    {
        if (editMode)
        {
            if (newStudent.FatherOrMother == "Father")
            {
                newStudent.IsFather = true;
            }
            else
            {
                newStudent.IsFather = false;
            }
            var response = await DataService.EditeStudent(new EditeStudentRequste
            {
                id = newStudent.Id,
                first_Name = newStudent.FirstName,
                last_Name = newStudent.LastName,
                gender = newStudent.Gender,
                address = newStudent.Address,
                birthDay = newStudent.DateOfBirth,
                phone = newStudent.PhoneNumber,
                father_Phone = newStudent.FatherPhoneNumber,
                father_Name = newStudent.FatherName,
                mother_Phone = newStudent.MotherPhoneNumber,
                mother_Name = newStudent.MotherName,
                defaultParentPhonIsFather = newStudent.IsFather,
                total_Payments = newStudent.TotalFee,
                divisionId = selectedDivisionId,
                agreedMonthlyPayment = newStudent.agreedMonthlyPayment
            });
            if (response.StatusCode == Requests_Status.Accepted)
            {
                var student = students.FirstOrDefault(s => s.Id == newStudent.Id);
                if (student != null)
                {
                    student.FirstName = newStudent.FirstName;
                    student.LastName = newStudent.LastName;
                    student.Gender = newStudent.Gender;
                    student.Address = newStudent.Address;
                    student.DateOfBirth = newStudent.DateOfBirth;
                    student.PhoneNumber = newStudent.PhoneNumber;
                    student.FatherName = newStudent.FatherName;
                    student.FatherPhoneNumber = newStudent.FatherPhoneNumber;
                    student.MotherName = newStudent.MotherName;
                    student.MotherPhoneNumber = newStudent.MotherPhoneNumber;
                    student.IsFather = newStudent.IsFather;
                    student.TotalFee = newStudent.TotalFee;
                    student.agreedMonthlyPayment = newStudent.agreedMonthlyPayment;
                }
                editMode = false;
                newStudent = new Student();
                CloseStudentModal();
                ToastService.ShowSuccess("تم التعديل بنجاح", settings =>
                {
                    settings.Icon = "fa-check-circle";
                });
                showEditModal = false;
            }
            else
            {
                ToastService.ShowError("حدث خطأ ما");
            }
        }
        else
        {
            if (newStudent.FatherOrMother == "Father")
            {
                newStudent.IsFather = true;
            }
            else
            {
                newStudent.IsFather = false;
            }
            var response = await DataService.AddStudent(new AddStudentRequste
            {
                first_Name = newStudent.FirstName,
                last_Name = newStudent.LastName,
                gender = newStudent.Gender,
                address = newStudent.Address,
                birthDay = newStudent.DateOfBirth,
                phone = newStudent.PhoneNumber,
                father_Name = newStudent.FatherName,
                father_Phone = newStudent.FatherPhoneNumber,
                mother_Name = newStudent.MotherName,
                mother_Phone = newStudent.MotherPhoneNumber,
                defaultParentPhonIsFather = newStudent.IsFather,
                total_Payments = newStudent.TotalFee,
                divisionId = selectedDivisionId,
                agreedMonthlyPayment = newStudent.agreedMonthlyPayment
            });
            if (response.StatusCode == Requests_Status.Accepted)
            {
                await LoadStudents();
                newStudent = new Student();
                CloseStudentModal();
                ToastService.ShowSuccess("تم الاضافة بنجاح", settings =>
                {
                    settings.Icon = "fa-check-circle";
                });
                showAddModal = false;
            }
            else
            {
                ToastService.ShowError("حدث خطأ ما");
            }
        }
    }

    private async Task DeleteStudent(Guid studentId)
    {
        var response = await DataService.DeleteStudent(studentId);
        if (response.StatusCode == Requests_Status.Accepted)
        {
            var student = students.FirstOrDefault(s => s.Id == studentId);
            if (student != null)
            {
                students.Remove(student);
                filteredStudents.Remove(student);
                ToastService.ShowSuccess("تم الحذف بنجاح", settings =>
                {
                    settings.Icon = "fa-check-circle";
                });
            }
        }
    }

    private void OpenStudentModal()
    {
        showAddModal = true;
    }

    private void CloseStudentModal()
    {
        showAddModal = false;
        showEditModal = false;
    }

    private async Task ShowPaymentsModal(Guid studentId)
    {
        currentStudent = students.FirstOrDefault(s => s.Id == studentId);
        if (currentStudent != null)
        {
            var response = await DataService.GetAllPayments(currentStudent.Id);
            if (response.StatusCode == Requests_Status.Ok)
            {
                payments = response.Data.ToObj<GetAllPaymentsResponse>().payments;
            }
            showPaymentsModal = true;
        }
    }

    private void ShowAddPaymentModal()
    {
        newPayment = new();
        showAddPaymentModal = true;
    }

    private async Task AddPayment()
    {
        if (currentStudent != null)
        {
            newPayment.Id = currentStudent.Id;
            await DataService.AddPayment(new AddPaymentRequste
            {
                description = newPayment.Description,
                studentId = newPayment.Id,
                value = newPayment.Value
            });
            ToastService.ShowSuccess("تم إضافة الدفع بنجاح");
            var response = await DataService.GetAllPayments(currentStudent.Id);
            if(response.StatusCode == Requests_Status.Ok)
            {
                payments = response.Data.ToObj<GetAllPaymentsResponse>().payments;
            }
            CloseAddPaymentModal();
        }
    }

    private void ClosePaymentsModal()
    {
        showPaymentsModal = false;
    }

    private void CloseAddPaymentModal()
    {
        showAddPaymentModal = false;
    }
}
