@page "/institute-management"
@inject ILocalStorageService LocalStorage
@inject SessionService SessionService
@inject NavigationManager NavigationManager
@inject DataService DataService
@inject Blazored.Toast.Services.IToastService ToastService
<h3 class="text-center">الشعب</h3>
<LinksMenu Links="navLinks" />

<div class="container mt-4">
    <h3>معلومات الشعب</h3>

    <div class="form-group">
        <label for="certificateSelect">اختار شهادة:</label>
        <select class="form-control" id="certificateSelect" @onchange="certificateChanged">
            <option value="">اختار الشهادة</option>
            @foreach (var certificate in certificates)
            {
                <option value="@certificate.id">@certificate.certificateName</option>
            }
        </select>
    </div>

    @if (CertificateTo != Guid.Empty)
    {
        <div>
            <button class="btn btn-primary mb-3" @onclick="ShowAddDivisionModal">اضافة شعبة جديدة</button>
        </div>
    }

    @if (isLoading)
    {
        <p>جاري التحميل</p>
    }
    else if (divisions == null || !divisions.Any())
    {
        <p>لا يوجد شعب</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>اسم الشعبة</th>
                    <th>عدد الطلاب</th>
                    <th>فعل</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var division in divisions)
                {
                    <tr>
                        <td>@division.Name</td>
                        <td>@division.StudentsNumber</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => ShowEditDivisionModal(division)">تعديل</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteDivision(division.Id)">حذف</button>
                            <button class="btn btn-info btn-sm" @onclick="() => NavigateToClasses(division.Id,CertificateTo)">الحصص</button>
                            <button class="btn btn-secondary btn-sm" @onclick="() => NavigateToTests(division.Id,CertificateTo)">الاختبارات</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <!-- Add Division Modal -->
    <div class="@($"modal fade {(showAddModal ? "show d-block" : "")}")" tabindex="-1" role="dialog" style="display: @(showAddModal ? "block" : "none")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">اضافة شعبة جديدة</h5>
                    <button type="button" class="close" @onclick="() => CloseModal(true)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="newDivisionName">اسم الشعبة</label>
                        <input type="text" class="form-control" id="newDivisionName" @bind="newDivision.Name">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => CloseModal(true)">اغلاق</button>
                    <button type="button" class="btn btn-primary" @onclick="AddDivision">اضافة الشعبة</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Division Modal -->
    <div class="@($"modal fade {(showEditModal ? "show d-block" : "")}")" tabindex="-1" role="dialog" style="display: @(showEditModal ? "block" : "none")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تعديل الشعبة</h5>
                    <button type="button" class="close" @onclick="() => CloseModal(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editDivisionName">اسم الشعبة</label>
                        <input type="text" class="form-control" id="editDivisionName" @bind="editedDivision.Name">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => CloseModal(false)">اغلاق</button>
                    <button type="button" class="btn btn-primary" @onclick="EditDivision">حفظ الشعبة</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string type { get; set; }
    private List<LinkItem> navLinks = new List<LinkItem>
    {
        new LinkItem { Name = "الشعب", Url = "/institute-management", IsActive = true },
        new LinkItem { Name = "القاعات", Url = "/halls", IsActive = false },
        new LinkItem { Name = "المواعيد", Url = "/dates", IsActive = false },
        new LinkItem { Name = "الاساتذة", Url = "/teachers", IsActive = false },
    };
    private Guid CertificateTo;
    private Guid selectedCertificateId;
    private const string V = "";
    private List<Certificate> certificates = new List<Certificate>();
    private List<Division> divisions = new List<Division>();
    private bool isLoading = false;
    private bool showAddModal = false;
    private bool showEditModal = false;
    private Division newDivision = new Division();
    private Division editedDivision = new Division();

    protected override async Task OnInitializedAsync()
    {
        type = await SessionService.GetUserIdAsync();

        if (type == "مشرف")
        {
            navLinks = new List<LinkItem>
            {
                new LinkItem { Name = "الشعب", Url = "/institute-management", IsActive = true },
                new LinkItem { Name = "المواعيد", Url = "/dates", IsActive = false },
            };
        }
        await LoadCertificates();
    }

    private async Task LoadCertificates()
    {
        isLoading = true;
        var response = await DataService.GetAllCertificates();
        if (response.StatusCode == Requests_Status.Ok)
        {
            var certificateDtos = response.Data.ToObj<GetAllCertificatesResponse>().certificates;
            certificates = certificateDtos.Select(dto => new Certificate
                {
                    id = dto.Id,
                    certificateName = dto.Name
                }).ToList();
        }
        isLoading = false;
    }
    private async Task certificateChanged(ChangeEventArgs e)
    {
        string certificateIdString = e.Value?.ToString();
        if (Guid.TryParse(certificateIdString, out Guid certificateId))
        {
            selectedCertificateId = certificateId;
            await LoadDivisions(selectedCertificateId);
        }
        else
        {
            divisions.Clear(); // Clear divisions if no valid certificateId
        }
    }
    private async Task LoadDivisions(Guid certificateId)
    {
        if (certificateId != Guid.Empty)
        {
            divisions.Clear();
            isLoading = true;
            selectedCertificateId = certificateId;
            var response = await DataService.GetAllDivisionsWithStudentsNomber(certificateId);
            CertificateTo = certificateId;
            if (response.StatusCode == Requests_Status.Ok)
            {
                var divisionDtos = response.Data.ToObj<GetAllDivisionsWithStudentsNomberResponse>().divisions;
                divisions = divisionDtos.Select(dto => new Division
                    {
                        Id = dto.Id,
                        Name = dto.Name,
                        StudentsNumber = dto.StudentsNomber,
                        CertificateId = certificateId
                    }).ToList();
            }

            isLoading = false;
        }
        else
        {
            divisions.Clear(); // Clear divisions if no valid certificateId
        }
    }

    private void ShowAddDivisionModal()
    {
        newDivision = new Division();
        showAddModal = true;
    }

    private AddDivisionRequste newDivisionRequest = new AddDivisionRequste();

    private async Task AddDivision()
    {
        newDivisionRequest.name = newDivision.Name;
        newDivisionRequest.certificateId = CertificateTo;

        var response = await DataService.AddDivision(newDivisionRequest);
        if (response.StatusCode == Requests_Status.Accepted)
        {
            CloseModal(true);
            await LoadDivisions(selectedCertificateId);
            ToastService.ShowSuccess("تم اضافة الشعبة بنجاح", settings =>
            {
                settings.Icon = "fa-check-circle";
            });
        }
        else
        {
            ToastService.ShowError("Something Went Wrong");
        }
    }

    private void ShowEditDivisionModal(Division division)
    {
        editedDivision = new Division
            {
                Id = division.Id,
                Name = division.Name,
                CertificateId = division.CertificateId
            };
        showEditModal = true;
    }

    private EditeDivisionRequste editDivisionRequest = new EditeDivisionRequste();

    private async Task EditDivision()
    {
        editDivisionRequest.name = editedDivision.Name;
        editDivisionRequest.certificateId = CertificateTo; // Ensure you have selectedCertificateId populated
        editDivisionRequest.id = editedDivision.Id; // Ensure editedDivision.id is set

        var response = await DataService.EditeDivision(editDivisionRequest);
        if (response.StatusCode == Requests_Status.Accepted)
        {
            var edited = divisions.FirstOrDefault(d => d.Id == editedDivision.Id);
            if (edited != null)
            {
                edited.Name = editDivisionRequest.name;
                edited.CertificateId = editDivisionRequest.certificateId;
            }
            CloseModal(false);
            ToastService.ShowSuccess("تم التعديل بنجاح", settings =>
            {
                settings.Icon = "fa-check-circle";
            });
        }
        else
        {
            ToastService.ShowError("حدث خطأ ما");
        }
    }

    private async Task ConfirmDeleteDivision(Guid divisionId)
    {

        var response = await DataService.DeleteDivision(divisionId);
        
        if (response.StatusCode == Requests_Status.Accepted)
        {
            divisions.RemoveAll(d => d.Id == divisionId);
            ToastService.ShowSuccess("تم الحذف بنجاح", settings =>
            {
                settings.Icon = "fa-check-circle";
            });
        }
        else
        {
            ToastService.ShowError("عذراً, احذف جميع الارتباطات المتعلقة بالشعبة اولاً");
        }
    }

    void NavigateToClasses(Guid divisionId, Guid certificateId)
    {
        if (divisionId != Guid.Empty)
        {
            NavigationManager.NavigateTo($"/weekly-sessions/{divisionId}/{certificateId}");
        }
    }


    private void NavigateToTests(Guid divisionId, Guid certificateId)
    {
        NavigationManager.NavigateTo($"/tests/{certificateId}/{divisionId}");
    }

    private void CloseModal(bool isAddModal)
    {
        if (isAddModal)
        {
            showAddModal = false;
        }
        else
        {
            showEditModal = false;
        }
    }
}
